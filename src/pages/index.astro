---
import { loadEnv } from 'vite';
import { renderRichText } from '@storyblok/astro';
import Categories from "../components/Categories.astro";
import LastestPosts from "../components/LastestPosts.astro";
import PostResult from "../components/PostResultFull.astro";
import Search from "../components/Search.astro";
import Tags from "../components/Tags.astro";
import Layout from "../layouts/Layout.astro";

const env = loadEnv("", process.cwd(), 'STORYBLOK');

// // get from API
const baseUrl = env.STORYBLOK_API_BASE_URL
const responseVersion = 'published'
const pageUrl = `${baseUrl}?token=${env.STORYBLOK_TOKEN}&version=${responseVersion}&filter_query[component][in]=post`;

const response = await fetch(pageUrl);
const blok = await response.json();

const posts = blok.stories.map((story: any) => {
  const { published_at, full_slug } = story;
  const content_data = story.content;
  const { categories, images, summary, tag, title, content } = content_data;

  return {
    author: env.AUTHOR,
    categories: categories.map((cat: any) => ({ name: cat.name, url: `/category/${cat.name}` })),
    date: new Date(published_at),
    images: images.map((image: any) => image.filename),
    summary,
    tags: tag.map((tag: any) => ({ name: tag.name, url: `/tag/${tag.name}` })),
    title,
    url: full_slug,
    content: renderRichText(content)
  };
});

const rawCategories = posts.map((post: any) => 
    post.categories).flat()

const tags = posts.map((post: any) => 
    post.tags).flat()
  .filter((tag: any, index: number, self: any) => 
    self.findIndex((t: any) => t.name === tag.name) === index)

const categories: Array<{ name: string, count: number, url: string }> = []
rawCategories.forEach((category: any) => {
  let idx = categories.findIndex((c) => c.name === category.name)

  if (idx >= 0) {
    categories[idx].count = categories[idx].count + 1 || 1
  } else {
    categories.push({name: category.name, count: 1, url: category.url})
  }
})

const latest = posts.sort((a: any, b: any) => b.date.valueOf() - a.date.valueOf()).slice(0, 3)

---

<Layout >

  <section class="section">
    <div class="container">
      <div class="columns is-desktop is-multiline">
        <div class="column is-8-desktop">
          
          {posts && posts.map((post: any) => (
            <PostResult 
              author={post.author}
              categories={post.categories}
              postDate={post.date}
              postSummary={post.summary}
              tags={post.tags}
              postUrl={post.url}
              postTitle={post.title}
              images={post.images}
            />
          ))}

        </div>

        <aside class="column is-4-desktop">
             <Search />

            <Categories categories={categories} />

            <Tags tags={tags} />

            <LastestPosts posts={latest} />
        </aside>
      </div>
    </div>
  </section>

</Layout>